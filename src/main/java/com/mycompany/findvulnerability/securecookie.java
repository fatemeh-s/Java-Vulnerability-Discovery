/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.findvulnerability;

import com.opencsv.CSVWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Value;

/**
 *
 * @author Fatemeh Saligheh
 */
public class securecookie {

    final Driver driver;
    String fileName;
    List<Record> target;

    public securecookie(final Driver driver, String fileName, String OutputFile) throws IOException {
        this.driver = driver;
        //the input file for secure cookie discovery
        this.fileName = fileName;
        boolean Finalresult = false;
        //for writing result in csv output file
        File file = new File(OutputFile);
        FileWriter csvWriter1 = new FileWriter(file, true);
        CSVWriter csvWriter = new CSVWriter(csvWriter1);
        System.out.println("*********************************************************securecookie test**********************************************************");
        //find start node
        List<Record> source = FindRootsecurecookie();
        //find end node
        List<Record> sink = findTarget();

        for (int i = 0; i < source.size() & !source.isEmpty(); i++) {
            for (int j = 0; j < sink.size() & !sink.isEmpty(); j++) {
                //is there any path between start and end node
                List<Record> path = Traversalsecurecookie(source.get(i).values().get(0), sink.get(j).values().get(0));
                //chek setSecure(true) ?
                List<Record> path2 = Setsecurecookie(source.get(i).values().get(0));
                if (!path.isEmpty()) {
                    if (path2.isEmpty()) {
                        Finalresult = true;
                        break;
                    }

                }
            }
        }

        //writing result
        if (Finalresult == true) {
            String[] list1 = {"SecureCookie", fileName, "true"};
            csvWriter.writeNext(list1);
        } else {
            String[] list1 = {"SecureCookie", fileName, "false"};
            csvWriter.writeNext(list1);
        }
        csvWriter.close();

    }
    //find start node
    public List<Record> FindRootsecurecookie() {
        //find parameter with type javax.servlet.http.Cookie
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH (t:nodes)-[]->(n:nodes)\n"
                    + "WHERE n.label=\"TYPE\" and n.code = \"javax.servlet.http.Cookie\"\n"
                    + "MATCH (x:nodes)-[]->(y:nodes)\n"
                    + "where x=t and y.label=\"NAME\"\n"
                    + "RETURN y.code");
            List<Record> resList = result.list();
            return resList;

        }
    }
    //find end node
    public List<Record> findTarget() {
        //find parameter with type HttpServletResponse
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH (t:nodes)-[]->(n:nodes)\n"
                    + "WHERE n.label=\"TYPE\" and n.code =~ \".*HttpServletResponse.*\"\n"
                    + "MATCH (x:nodes)-[]->(y:nodes)\n"
                    + "where x=t and y.label=\"NAME\"\n"
                    + "RETURN y.code");
            List<Record> resList = result.list();
            return resList;
        }
    }
    
    //check is set cookie to setSecure(true) ?
    public List<Record> Setsecurecookie(Value source) {
        String so = source.toString().replaceAll("\"", "");
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH (cs:nodes)\n"
                    + "where cs.code =~ \".*" + so + ".setSecure(.*true.*).*\"\n"
                    + "RETURN cs");

            List<Record> resList = result.list();

            return resList;
        }

    }

    //is there any path from start to end node
    public List<Record> Traversalsecurecookie(Value source, Value sink) {
        String so = source.toString().replaceAll("\"", "");
        String si = sink.toString().replaceAll("\"", "");
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH (cs:nodes)\n"
                    + "where cs.code =~ \".*" + si + ".addCookie(.*" + so + ".*).*\"\n"
                    + "RETURN cs");

            List<Record> resList = result.list();

            return resList;
        }
    }
}
