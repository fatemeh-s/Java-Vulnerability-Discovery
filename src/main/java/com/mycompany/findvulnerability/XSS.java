/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.findvulnerability;

import com.opencsv.CSVWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;
import org.neo4j.driver.v1.TransactionWork;
import org.neo4j.driver.v1.Value;
import static org.neo4j.driver.v1.Values.parameters;

/**
 *
 * @author Fatemeh Saligheh
 */
public class XSS {
    final Driver driver;
    String fileName ;
    public XSS(final Driver driver , String fileName) throws IOException{
        this.driver = driver;
        this.fileName = fileName;
        System.out.println("****************************************************************xss test**************************************************************");
        findRootXSS();
    }
    public void findRootXSS() throws IOException {
        
        try (Session session = driver.session()) {
            
            File file = new File("xss3.csv"); 
            FileWriter csvWriter1 = new FileWriter(file,true);
            CSVWriter csvWriter = new CSVWriter(csvWriter1);
            String greeting = session.writeTransaction(new TransactionWork<String>() {
                boolean isXSS = false ;
                @Override
                public String execute(Transaction tx) {
                    StatementResult result = tx.run("MATCH (n:nodes)" + "where n.code=~\".*response.getWriter().*\"" + "RETURN n.label,n.file");
                    List<Record> resList = result.list();
//                    if (resList.isEmpty()) {
////                        System.out.println(" --------------------------- no XSS found in this file");
//                        String[] list1 = { fileName, "false"};
//                        csvWriter.writeNext(list1);
//                    }
                    for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
                        boolean flag = TraversalXSS(resList.get(i).values().get(0), resList.get(i).values().get(1));
                        if (flag == true) {
                            isXSS = true;
                        }
                    }
                    if (isXSS == true) {
                            
//                            System.out.println("++++++++++++++++++++++++++++++++++" + fileName + " has XSS");
                            String[] list1 = { fileName, "true"};
                            csvWriter.writeNext(list1);
                        } else {
//                            System.out.println("----------------------------------" + fileName + " no XSS");
                            String[] list1 = { fileName, "false"};
                            csvWriter.writeNext(list1);
                        }
                    return null;

                }
            });
            csvWriter.close();
        }
    }

    public boolean TraversalXSS(Value label, Value file) {
        boolean xss = false;
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH p=(n:nodes)-[e:edges]->(t:nodes)\n"
                    + "where t.label =$label AND e.label<>\"\" AND n.file=$file AND e.file=$file AND t.file=$file\n"
                    + "RETURN n.label,n.code,e.label", parameters("label", label, "file", file));
            List<Record> resList = result.list();
//                        System.out.println(resList.isEmpty());
            for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
                System.out.println(resList.get(i).values().get(1));
                if (resList.get(i).values().get(1).toString().indexOf("HttpServletRequest") != -1 ? true : false) {
                    return true;
                } else if (resList.get(i).values().get(1).toString().indexOf("encodeForHTML") != -1 ? true : false) {
                    return false;
                } else if (resList.get(i).values().get(1).toString().indexOf("escapeHtml") != -1 ? true : false) {
                    return false;
                } else {
                    xss = TraversalXSS(resList.get(i).values().get(0), file);
                    if (xss == true) {
                        return true;
                    }
                }

            }
        }

        return false;
    }
    
    
    
}
