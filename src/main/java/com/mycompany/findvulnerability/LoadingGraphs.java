/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.findvulnerability;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;
import org.neo4j.driver.v1.TransactionWork;

/**
 *
 * @author Fatemeh Saligheh
 */
public class LoadingGraphs {
    final Driver driver;
    public LoadingGraphs(final Driver driver,String ASTpath,String PDGpath) throws IOException{
        this.driver = driver;

            LoadAST(ASTpath);
            LoadPDG(PDGpath);
       
    }
    
    public void LoadAST(String path){
        System.out.println(path);
        try ( Session session = driver.session() )
        {
            try{
            String greeting = session.writeTransaction( new TransactionWork<String>()
            {
                @Override
                public String execute( Transaction tx )
                {
                    
                    tx.run("call apoc.load.json(\""+path+"\") yield value as graph\n" +
                            "unwind graph.nodes as nodes\n" +
                            "create(n:nodes)\n" +
                            "set n.id=nodes.id,\n" +
                            "	n.code = nodes.code,\n" +
                            "   n.label = nodes.label,\n" +
                            "   n.type = nodes.type,\n" +
                            "   n.file = graph.file");
                    tx.run("call apoc.load.json(\""+path+"\") yield value as graph\n" +
                            "unwind graph.edges as edges\n" +
                            "MATCH (node1:nodes)\n" +
                            "WHERE (node1.label=edges.source)\n" +
                            "MATCH (node2:nodes)\n" +
                            "WHERE (node2.label=edges.target)\n" +
                            "MERGE (node1)-[pu:edges{id:edges.id}]->(node2)\n" +
                            "ON CREATE SET pu.label= edges.id "
                            + ",pu.file=graph.file,pu.source=edges.source,pu.target=edges.target;");
                    //System.out.println("***********"+ result.list().get(0));
                    return null;
                   
                }
            } );
            }catch(Exception e){
                System.out.println("there is a exception");
            }
//            System.out.println( greeting );
        }
    }
    
    public void LoadCFG(String path){
        
    }
    
    public void LoadPDG(String path){
//        System.out.println("running PDG");
        System.out.println(path);
        try ( Session session = driver.session() )
        {
            try{
            String greeting = session.writeTransaction( new TransactionWork<String>()
            {
                @Override
                public String execute( Transaction tx )
                {
                    
                    tx.run("call apoc.load.json(\""+path+"\") yield value as graph\n" +
                            "unwind graph.nodes as nodes\n" +
                            "create(n:nodes)\n" +
                            "set n.label=nodes.id,\n" +
                            "	n.code = nodes.code,\n" +
                            "    n.defs = nodes.defs,\n" +
                            "    n.uses = nodes.uses,\n" +
                            "    n.type = nodes.type,\n" +
                            "    n.file = graph.file");
                    tx.run("call apoc.load.json(\""+path+"\") yield value as graph\n" +
                            "unwind graph.edges as edges\n" +
                            "MATCH (node1:nodes)\n" +
                            "WHERE (node1.label=edges.source)\n" +
                            "MATCH (node2:nodes)\n" +
                            "WHERE (node2.label=edges.target)\n" +
                            "MERGE (node1)-[pu:edges{id:edges.id}]->(node2)\n" +
                            "ON CREATE SET pu.label= edges.label, pu.type = edges.type "
                            + ",pu.file=graph.file,pu.source=edges.source,pu.target=edges.target;");
                    //System.out.println("***********"+ result.list().get(0));
                    return null;
                   
                }
            } );
            }catch(Exception e){
                System.out.println("there is a exception");
            }
//            System.out.println( greeting );
        }
    }
    
}
