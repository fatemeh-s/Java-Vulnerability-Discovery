/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.findvulnerability;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Transaction;
import org.neo4j.driver.v1.TransactionWork;
import org.neo4j.driver.v1.Value;
import static org.neo4j.driver.v1.Values.parameters;

/**
 *
 * @author Fatemeh Saligheh
 */
public class Query {

    final Driver driver;

    public Query(final Driver driver) {
        this.driver = driver;
        XSSDetection();
        SqliDetection();
    }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    public void XSSDetection() {
        System.out.println("*****************************xss test**************************************");
        findRootXSS();
    }

    public void findRootXSS() {
        try (Session session = driver.session()) {
            String greeting = session.writeTransaction(new TransactionWork<String>() {
                @Override
                public String execute(Transaction tx) {
                    StatementResult result = tx.run("MATCH (n:nodes)" + "where n.code=~\".*response.getWriter().*\"" + "RETURN n.label,n.file");
                    List<Record> resList = result.list();
                    if (resList.isEmpty()) {
                        System.out.println(" --------------------------- no XSS found in this file");
                    }
                    for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
//                        System.out.println(resList.get(i).values().get(0) + "    " + resList.get(i).values().get(1))
                        boolean flag = TraversalXSS(resList.get(i).values().get(0), resList.get(i).values().get(1));
                        if (flag == true) {
                            System.out.println("++++++++++++++++++++++++++++++++++" + resList.get(i).values().get(1) + " has XSS");
                        } else {
                            System.out.println("----------------------------------" + resList.get(i).values().get(1) + " no XSS");
                        }
                    }

                    return null;

                }
            });

        }
    }

    public boolean TraversalXSS(Value label, Value file) {
        boolean xss = false;
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH p=(n:nodes)-[e:edges]->(t:nodes)\n"
                    + "where t.label =$label AND e.label<>\"\" AND n.file=$file AND e.file=$file AND t.file=$file\n"
                    + "RETURN n.label,n.code", parameters("label", label, "file", file));
            List<Record> resList = result.list();
//                        System.out.println(resList.isEmpty());
            for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
                System.out.println(resList.get(i).values().get(1));
                if (resList.get(i).values().get(1).toString().indexOf("request.get") != -1 ? true : false) {

                    return true;
                } else if (resList.get(i).values().get(1).toString().indexOf("encodeForHTML") != -1 ? true : false) {

                    return false;
                } else if (resList.get(i).values().get(1).toString().indexOf("escapeHtml") != -1 ? true : false) {

                    return false;
                } else {

                    xss = TraversalXSS(resList.get(i).values().get(0), file);
                    if (xss == true) {
                        return true;
                    }
                }

            }
        }

        return false;
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////   
    public void SqliDetection() {
        System.out.println("*****************************sqli test**************************************");
        FindRootSqli();
    }

    public void FindRootSqli() {
        try (Session session = driver.session()) {
            String greeting = session.writeTransaction(new TransactionWork<String>() {
                @Override
                public String execute(Transaction tx) {
                    StatementResult result = tx.run("MATCH (n:nodes)" + "where n.code=~\".*java.sql.*statement.*\"" + "RETURN n.label,n.file");
                    List<Record> resList = result.list();
                    if (resList.isEmpty()) {
                        result = tx.run("MATCH (n:nodes)" + "where n.code=~\".*org.owasp.benchmark.helpers.DatabaseHelper.*\"" + "RETURN n.label,n.file");
                        resList = result.list();
                    }
                    if (resList.isEmpty()) {
                        System.out.println("no sqli found in this file");
                    }
//                    for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
////                        System.out.println(resList.get(i).values().get(0) + "    " + resList.get(i).values().get(1));
//                        TraversalSqli(resList.get(i).values().get(0),resList.get(i).values().get(1));
//                    }

                    return null;

                }
            });

        }
    }

    public boolean TraversalSqli(Value label, Value file) {
        boolean sqli = false;
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH p=(n:nodes)-[e:edges]->(t:nodes)\n"
                    + "where t.label =$label AND e.label<>\"\" AND n.file=$file AND e.file=$file AND t.file=$file\n"
                    + "RETURN n.label,n.code", parameters("label", label, "file", file));
            List<Record> resList = result.list();
//                        System.out.println(resList.isEmpty());
            for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
                System.out.println(resList.get(i).values().get(1));
                if (resList.get(i).values().get(1).toString().indexOf("request.get") != -1 ? true : false) {

                    return true;
                } else {

                    sqli = TraversalXSS(resList.get(i).values().get(0), file);
                    if (sqli == true) {
                        return true;
                    }
                }

            }
        }

        return false;
    }
}
