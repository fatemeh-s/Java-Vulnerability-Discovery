/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.findvulnerability;

import com.opencsv.CSVWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Value;
import static org.neo4j.driver.v1.Values.parameters;

/**
 *
 * @author Fatemeh Saligheh
 */
public class PathTraversal {
    final Driver driver;
    String fileName ;
    List<Record> target;
    public PathTraversal(final Driver driver , String fileName , String OutputFile) throws IOException{
        this.driver = driver;
        this.fileName = fileName;
        boolean Finalresult = false;
        File file = new File(OutputFile); 
        FileWriter csvWriter1 = new FileWriter(file,true);
        CSVWriter csvWriter = new CSVWriter(csvWriter1);
        System.out.println("*********************************************************PathTraversal test**********************************************************");
        List<Record> source = FindRootPathTraversal();
        List<Record> sink = findTarget();
        
        for(int i=0 ; i<source.size() & !source.isEmpty();i++){
            for(int j=0 ; j<sink.size() & !sink.isEmpty();j++){
                System.out.println(source.get(i).values().get(0).toString()+"&&&&&&"+sink.get(j).values().get(0).toString());
                List<Record> path = TraversalPathTraversal(source.get(i).values().get(0),sink.get(j).values().get(0)); 
                if(!path.isEmpty()){
                    System.out.println(path.get(0).values().get(0).toString());
                    Finalresult = true ;
                    break;
                }
            }
        }
        
        
         if (Finalresult == true) {
            String[] list1 = {"PathTraver",fileName, "true"};
            csvWriter.writeNext(list1);
        } else {
            String[] list1 = {"PathTraver",fileName, "false"};
            csvWriter.writeNext(list1);
        }
        csvWriter.close();  
       
    }
    
    
    public List<Record> FindRootPathTraversal(){
        
        
        try (Session session = driver.session()) {
                    StatementResult result = session.run("MATCH (t:nodes)-[]->(n:nodes)\n" +
                                                        "WHERE n.label=\"TYPE\" and n.code =~ \"HttpServletRequest\"\n" +
                                                        "MATCH (x:nodes)-[]->(y:nodes)\n" +
                                                        "where x=t and y.label=\"NAME\"\n" +
                                                        "RETURN y.code");
                    List<Record> resList = result.list();
//                    System.out.println(resList.get(0).values().get(0));
                    return resList;

        }
    }
    
    public List<Record> findTarget(){
        try (Session session = driver.session()) {
                    StatementResult result = session.run("MATCH (t:nodes)-[]->(n:nodes)\n" +
                                                        "WHERE n.label=\"TYPE\" and (n.code =~ \".*java.io.File.*\" or n.code =~ \".*java.io..*Stream.*\") \n" +
                                                        "MATCH (x:nodes)-[]->(y:nodes)\n" +
                                                        "where x=t and y.label=\"NAME\"\n" +
                                                        "RETURN y.code");
                    List<Record> resList = result.list();
//                    System.out.println(resList.get(0).values().get(0));
                    return resList;
        }
    }

    public List<Record> TraversalPathTraversal(Value source, Value sink){
        String so = source.toString().replaceAll("\"", "");
        String si = sink.toString().replaceAll("\"", "");
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH (cs:nodes),(ms:nodes), p = shortestPath((ms)-[*]->(cs))\n" +
                                                "where cs.code =~ \".*"+si+".*\" AND ms.code =~ \".*"+so+".*\" AND cs.graph ='PDG-DATA' AND ms.graph ='PDG-DATA' \n" +
                                                "WITH p\n" +
                                                "WHERE length(p)> 1\n" +
                                                "RETURN p");
            
            List<Record> resList = result.list();
            
            return resList;
        }
        
    }
    
}
