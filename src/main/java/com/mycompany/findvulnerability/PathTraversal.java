/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.findvulnerability;

import java.util.List;
import org.neo4j.driver.v1.Driver;
import org.neo4j.driver.v1.Record;
import org.neo4j.driver.v1.Session;
import org.neo4j.driver.v1.StatementResult;
import org.neo4j.driver.v1.Value;
import static org.neo4j.driver.v1.Values.parameters;

/**
 *
 * @author Fatemeh Saligheh
 */
public class PathTraversal {
    final Driver driver;
    public PathTraversal(final Driver driver){
        this.driver = driver;
        System.out.println("******************************************************Path Traversal*************************************************************");
        
    }
    
    public void FindRootSqli() {
        boolean Finalresult = false;
        Value file ;
        try (Session session = driver.session()) {
                    StatementResult result = session.run("MATCH (n:nodes)" + "where n.code=~\".*java.sql.*Statement.*\"" + "RETURN n.label,n.file");
                    List<Record> resList = result.list();
                    
//                    if (resList.isEmpty()) {
//                        result = session.run("MATCH (n:nodes)" + "where n.code=~\".*org.owasp.benchmark.helpers.DatabaseHelper.*().*\"" + "RETURN n.label,n.file");
//                        resList = result.list();
//                    }
                    if (resList.isEmpty()) {
                        System.out.println("-----------------------------------no path found in this file");
                        return;
                    }
                    file = resList.get(0).values().get(1);
                    for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
                        System.out.println("root : " + resList.get(i).values().get(0) );
                        StatementResult result2 = session.run("MATCH p=(n:nodes)-[e:edges]->(t:nodes)\n"
                                + "where t.label =$label AND e.label<>\"\" AND n.file=$file AND e.file=$file AND t.file=$file\n"
                                + "RETURN n.label,n.code", parameters("label", resList.get(i).values().get(0), "file", resList.get(i).values().get(1)));
                        List<Record> resList2 = result2.list();

                        if (resList2.isEmpty()) {
                            result2 = session.run("MATCH p=(n:nodes)-[e:edges]->(t:nodes)\n"
                                    + "where n.label =$label AND e.label<>\"\" AND n.file=$file AND e.file=$file AND t.file=$file\n"
                                    + "RETURN t.label,t.code", parameters("label", resList.get(i).values().get(0), "file", resList.get(i).values().get(1)));
                            resList2 = result2.list();
                            for(int j=0;j<resList2.size() & !resList2.isEmpty();j++){
                                if(!resList2.get(j).values().get(0).equals(resList.get(i).values().get(0))){
                                    boolean flag = TraversalSqli(resList2.get(j).values().get(0), resList.get(j).values().get(1));
                                    if (flag == true){
                                        Finalresult = true;
                                        break;
                                    }
                                }
                                
                            }
                            
                        }else{
                            boolean flag = TraversalSqli(resList.get(i).values().get(0), resList.get(i).values().get(1));
                            if (flag == true){
                                Finalresult = true;
                                break;
                            }
                        }
                       
                    }

                    if (Finalresult == true){
                        System.out.println("++++++++++++++++++++++++++++++++++" + file + " has sqli");
                    }else {
                        System.out.println("----------------------------------" + file + " no sqli");
                    }
                    return;

        }
    }

    public boolean TraversalSqli(Value label, Value file) {
        boolean sqli = false;
        System.out.println("traverlabel"+label);
        try (Session session = driver.session()) {
            StatementResult result = session.run("MATCH p=(n:nodes)-[e:edges]->(t:nodes)\n"
                    + "where t.label =$label AND e.label<>\"\" AND n.file=$file AND e.file=$file AND t.file=$file\n"
                    + "RETURN n.label,n.code", parameters("label", label, "file", file));
            List<Record> resList = result.list();
            
            for (int i = 0; i < resList.size() & !resList.isEmpty(); i++) {
                System.out.println("in for");
                if (resList.get(i).values().get(1).toString().indexOf("HttpServletRequest") != -1 ? true : false) {
                    return true;
                } else {
                    sqli = TraversalSqli(resList.get(i).values().get(0), file);
                    if (sqli == true) {
                        return true;
                    }
                }
            }
        }
        return false;
    }
}
