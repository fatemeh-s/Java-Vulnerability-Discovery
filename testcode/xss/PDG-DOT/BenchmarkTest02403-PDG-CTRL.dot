digraph BenchmarkTest02403_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request )"];
  v7  [label="44:  String param = scr.getTheParameter('vector')"];
  v8  [label="45:  if (param == null)"];
  v9  [label="THEN"];
  v10  [label="45:  param = ''"];
  v11  [label="47:  String bar = doSomething(param)"];
  v12  [label="49:  Object[] obj = { 'a', 'b'}"];
  v13  [label="50:  response.getWriter().printf(java.util.Locale.US,bar,obj)"];
  v14  [label="exit"];
  v15  [label="53:  String doSomething(String param)"];
  v16  [label="56:  String a19938 = param"];
  v17  [label="57:  StringBuilder b19938 = new StringBuilder(a19938)"];
  v18  [label="58:  b19938.append(' SafeStuff')"];
  v19  [label="59:  b19938.replace(b19938.length()-'Chars'.length(),b19938.length(),'Chars')"];
  v20  [label="60:  java.util.HashMap<String,Object> map19938 = new java.util.HashMap<String,Object>()"];
  v21  [label="61:  map19938.put('key19938', b19938.toString())"];
  v22  [label="62:  String c19938 = (String)map19938.get('key19938')"];
  v23  [label="63:  String d19938 = c19938.substring(0,c19938.length()-1)"];
  v24  [label="64:  String e19938 = new String( new sun.misc.BASE64Decoder().decodeBuffer( 
		    new sun.misc.BASE64Encoder().encode( d19938.getBytes() ) ))"];
  v25  [label="66:  String f19938 = e19938.split(' ')[0]"];
  v26  [label="67:  org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing()"];
  v27  [label="68:  String bar = thing.doSomething(f19938)"];
  v28  [label="70:  return bar;"];
  v29  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v4 -> v8;
  v8 -> v9  [label="True"];
  v9 -> v10;
  v4 -> v11;
  v4 -> v12;
  v4 -> v13;
  v4 -> v14;
  v15 -> v16;
  v15 -> v17;
  v15 -> v18;
  v15 -> v19;
  v15 -> v20;
  v15 -> v21;
  v15 -> v22;
  v15 -> v23;
  v15 -> v24;
  v15 -> v25;
  v15 -> v26;
  v15 -> v27;
  v15 -> v28;
  v15 -> v29;
  // end-of-graph
}
