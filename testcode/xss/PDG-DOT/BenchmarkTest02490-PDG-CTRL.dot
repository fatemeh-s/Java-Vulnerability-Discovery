digraph BenchmarkTest02490_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  String[] values = request.getParameterValues('vector')"];
  v7  [label="44:  String param"];
  v8  [label="45:  if (values != null && values.length > 0)"];
  v9  [label="THEN"];
  v10  [label="46:  param = values[0]"];
  v11  [label="ELSE"];
  v12  [label="47:  param = ''"];
  v13  [label="49:  String bar = doSomething(param)"];
  v14  [label="51:  Object[] obj = { 'a', 'b'}"];
  v15  [label="52:  response.getWriter().printf(bar,obj)"];
  v16  [label="exit"];
  v17  [label="55:  String doSomething(String param)"];
  v18  [label="58:  String a95559 = param"];
  v19  [label="59:  StringBuilder b95559 = new StringBuilder(a95559)"];
  v20  [label="60:  b95559.append(' SafeStuff')"];
  v21  [label="61:  b95559.replace(b95559.length()-'Chars'.length(),b95559.length(),'Chars')"];
  v22  [label="62:  java.util.HashMap<String,Object> map95559 = new java.util.HashMap<String,Object>()"];
  v23  [label="63:  map95559.put('key95559', b95559.toString())"];
  v24  [label="64:  String c95559 = (String)map95559.get('key95559')"];
  v25  [label="65:  String d95559 = c95559.substring(0,c95559.length()-1)"];
  v26  [label="66:  String e95559 = new String( new sun.misc.BASE64Decoder().decodeBuffer( 
		    new sun.misc.BASE64Encoder().encode( d95559.getBytes() ) ))"];
  v27  [label="68:  String f95559 = e95559.split(' ')[0]"];
  v28  [label="69:  org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing()"];
  v29  [label="70:  String g95559 = 'barbarians_at_the_gate'"];
  v30  [label="71:  String bar = thing.doSomething(g95559)"];
  v31  [label="73:  return bar;"];
  v32  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v4 -> v8;
  v8 -> v9  [label="True"];
  v9 -> v10;
  v8 -> v11  [label="False"];
  v11 -> v12;
  v4 -> v13;
  v4 -> v14;
  v4 -> v15;
  v4 -> v16;
  v17 -> v18;
  v17 -> v19;
  v17 -> v20;
  v17 -> v21;
  v17 -> v22;
  v17 -> v23;
  v17 -> v24;
  v17 -> v25;
  v17 -> v26;
  v17 -> v27;
  v17 -> v28;
  v17 -> v29;
  v17 -> v30;
  v17 -> v31;
  v17 -> v32;
  // end-of-graph
}
