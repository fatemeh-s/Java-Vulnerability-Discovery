digraph BenchmarkTest00650_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request )"];
  v6  [label="44:  String param = scr.getTheParameter('vector')"];
  v7  [label="45:  if (param == null)"];
  v8  [label="45:  param = ''"];
  v9  [label="endif"];
  v10  [label="49:  String a60959 = param"];
  v11  [label="50:  StringBuilder b60959 = new StringBuilder(a60959)"];
  v12  [label="51:  b60959.append(' SafeStuff')"];
  v13  [label="52:  b60959.replace(b60959.length()-'Chars'.length(),b60959.length(),'Chars')"];
  v14  [label="53:  java.util.HashMap<String,Object> map60959 = new java.util.HashMap<String,Object>()"];
  v15  [label="54:  map60959.put('key60959', b60959.toString())"];
  v16  [label="55:  String c60959 = (String)map60959.get('key60959')"];
  v17  [label="56:  String d60959 = c60959.substring(0,c60959.length()-1)"];
  v18  [label="57:  String e60959 = new String( new sun.misc.BASE64Decoder().decodeBuffer( 
		    new sun.misc.BASE64Encoder().encode( d60959.getBytes() ) ))"];
  v19  [label="59:  String f60959 = e60959.split(' ')[0]"];
  v20  [label="60:  org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing()"];
  v21  [label="61:  String g60959 = 'barbarians_at_the_gate'"];
  v22  [label="62:  String bar = thing.doSomething(g60959)"];
  v23  [label="65:  response.getWriter().write(bar.toCharArray())"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  // end-of-graph
}
