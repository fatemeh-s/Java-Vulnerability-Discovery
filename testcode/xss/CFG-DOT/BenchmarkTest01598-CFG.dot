digraph BenchmarkTest01598_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String[] values = request.getParameterValues('vector')"];
  v6  [label="44:  String param"];
  v7  [label="45:  if (values != null && values.length > 0)"];
  v8  [label="46:  param = values[0]"];
  v9  [label="endif"];
  v10  [label="47:  param = ''"];
  v11  [label="49:  String bar = new Test().doSomething(param)"];
  v12  [label="51:  response.getWriter().write(bar)"];
  v13  [label="56:  String doSomething(String param)"];
  v14  [label="59:  String a8895 = param"];
  v15  [label="60:  StringBuilder b8895 = new StringBuilder(a8895)"];
  v16  [label="61:  b8895.append(' SafeStuff')"];
  v17  [label="62:  b8895.replace(b8895.length()-'Chars'.length(),b8895.length(),'Chars')"];
  v18  [label="63:  java.util.HashMap<String,Object> map8895 = new java.util.HashMap<String,Object>()"];
  v19  [label="64:  map8895.put('key8895', b8895.toString())"];
  v20  [label="65:  String c8895 = (String)map8895.get('key8895')"];
  v21  [label="66:  String d8895 = c8895.substring(0,c8895.length()-1)"];
  v22  [label="67:  String e8895 = new String( new sun.misc.BASE64Decoder().decodeBuffer( 
		    new sun.misc.BASE64Encoder().encode( d8895.getBytes() ) ))"];
  v23  [label="69:  String f8895 = e8895.split(' ')[0]"];
  v24  [label="70:  org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing()"];
  v25  [label="71:  String bar = thing.doSomething(f8895)"];
  v26  [label="73:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v10  [label="False"];
  v10 -> v9;
  v9 -> v11;
  v11 -> v12;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  // end-of-graph
}
