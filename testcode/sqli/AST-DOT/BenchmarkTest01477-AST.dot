digraph BenchmarkTest01477_AST {
  // graph-vertices
  n1  [label="ROOT: BenchmarkTest01477.java"];
  n2  [label="PACKAGE: org.owasp.benchmark.testcode"];
  n3  [label="IMPORTS"];
  n4  [label="IMPORT: java.io.IOException"];
  n5  [label="IMPORT: javax.servlet.ServletException"];
  n6  [label="IMPORT: javax.servlet.annotation.WebServlet"];
  n7  [label="IMPORT: javax.servlet.http.HttpServlet"];
  n8  [label="IMPORT: javax.servlet.http.HttpServletRequest"];
  n9  [label="IMPORT: javax.servlet.http.HttpServletResponse"];
  n10  [label="CLASS"];
  n11  [label="MODIFIER: @WebServlet('/BenchmarkTest01477') public"];
  n12  [label="NAME: BenchmarkTest01477"];
  n13  [label="EXTENDS: HttpServlet"];
  n14  [label="FIELD"];
  n15  [label="MODIFIER: private static final"];
  n16  [label="TYPE: long"];
  n17  [label="NAME: serialVersionUID"];
  n18  [label="INIT: = 1L"];
  n19  [label="METHOD"];
  n20  [label="MODIFIER: @Override public"];
  n21  [label="RETURN: void"];
  n22  [label="NAME: doGet"];
  n23  [label="PARAMS"];
  n24  [label="VAR"];
  n25  [label="TYPE: HttpServletRequest"];
  n26  [label="NAME: request"];
  n27  [label="VAR"];
  n28  [label="TYPE: HttpServletResponse"];
  n29  [label="NAME: response"];
  n30  [label="BLOCK"];
  n31  [label="36:  doPost(request, response)"];
  n32  [label="METHOD"];
  n33  [label="MODIFIER: @Override public"];
  n34  [label="RETURN: void"];
  n35  [label="NAME: doPost"];
  n36  [label="PARAMS"];
  n37  [label="VAR"];
  n38  [label="TYPE: HttpServletRequest"];
  n39  [label="NAME: request"];
  n40  [label="VAR"];
  n41  [label="TYPE: HttpServletResponse"];
  n42  [label="NAME: response"];
  n43  [label="BLOCK"];
  n44  [label="41:  response.setContentType('text/html')"];
  n45  [label="VAR"];
  n46  [label="TYPE: String"];
  n47  [label="NAME: param"];
  n48  [label="INIT: = ''"];
  n49  [label="VAR"];
  n50  [label="TYPE: boolean"];
  n51  [label="NAME: flag"];
  n52  [label="INIT: = true"];
  n53  [label="VAR"];
  n54  [label="TYPE: java.util.Enumeration<String>"];
  n55  [label="NAME: names"];
  n56  [label="INIT: = request.getParameterNames()"];
  n57  [label="WHILE"];
  n58  [label="COND: (names.hasMoreElements() && flag)"];
  n59  [label="BLOCK"];
  n60  [label="VAR"];
  n61  [label="TYPE: String"];
  n62  [label="NAME: name"];
  n63  [label="INIT: = (String) names.nextElement()"];
  n64  [label="VAR"];
  n65  [label="TYPE: String[]"];
  n66  [label="NAME: values"];
  n67  [label="INIT: = request.getParameterValues(name)"];
  n68  [label="IF"];
  n69  [label="COND: (values!=null)"];
  n70  [label="THEN"];
  n71  [label="FOR"];
  n72  [label="INIT: inti=0"];
  n73  [label="COND: i<values.length&&flag"];
  n74  [label="UPDATE: i++"];
  n75  [label="BLOCK"];
  n76  [label="VAR"];
  n77  [label="TYPE: String"];
  n78  [label="NAME: value"];
  n79  [label="INIT: = values[i]"];
  n80  [label="IF"];
  n81  [label="COND: (value.equals('vector'))"];
  n82  [label="THEN"];
  n83  [label="53:  param = name"];
  n84  [label="54:  flag = false"];
  n85  [label="VAR"];
  n86  [label="TYPE: String"];
  n87  [label="NAME: bar"];
  n88  [label="INIT: = new Test().doSomething(param)"];
  n89  [label="VAR"];
  n90  [label="TYPE: String"];
  n91  [label="NAME: sql"];
  n92  [label="INIT: = 'INSERT INTO users (username, password) VALUES ('foo',''+ bar + '')'"];
  n93  [label="TRY"];
  n94  [label="BLOCK"];
  n95  [label="VAR"];
  n96  [label="TYPE: java.sql.Statement"];
  n97  [label="NAME: statement"];
  n98  [label="INIT: = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement()"];
  n99  [label="VAR"];
  n100  [label="TYPE: int"];
  n101  [label="NAME: count"];
  n102  [label="INIT: = statement.executeUpdate( sql, new String[] {'USERNAME','PASSWORD'} )"];
  n103  [label="67:  org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response)"];
  n104  [label="CATCH"];
  n105  [label="TYPE: java.sql.SQLException"];
  n106  [label="NAME: e"];
  n107  [label="BLOCK"];
  n108  [label="IF"];
  n109  [label="COND: (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  n110  [label="THEN"];
  n111  [label="70:  response.getWriter().println('Error processing request.')"];
  n112  [label="71:  return;"];
  n113  [label="ELSE"];
  n114  [label="73:  throw new ServletException(e);"];
  n115  [label="CLASS"];
  n116  [label="MODIFIER: @WebServlet('/BenchmarkTest01477') public"];
  n117  [label="NAME: Test"];
  n118  [label="METHOD"];
  n119  [label="MODIFIER: public"];
  n120  [label="RETURN: String"];
  n121  [label="NAME: doSomething"];
  n122  [label="PARAMS"];
  n123  [label="VAR"];
  n124  [label="TYPE: String"];
  n125  [label="NAME: param"];
  n126  [label="BLOCK"];
  n127  [label="VAR"];
  n128  [label="TYPE: String"];
  n129  [label="NAME: bar"];
  n130  [label="VAR"];
  n131  [label="TYPE: String"];
  n132  [label="NAME: guess"];
  n133  [label="INIT: = 'ABC'"];
  n134  [label="VAR"];
  n135  [label="TYPE: char"];
  n136  [label="NAME: switchTarget"];
  n137  [label="INIT: = guess.charAt(2)"];
  n138  [label="SWITCH"];
  n139  [label="NAME: (switchTarget)"];
  n140  [label="BLOCK"];
  n141  [label="CASE: 'A'"];
  n142  [label="88:  bar = param"];
  n143  [label="89:  break;"];
  n144  [label="BLOCK"];
  n145  [label="CASE: 'B'"];
  n146  [label="91:  bar = 'bobs_your_uncle'"];
  n147  [label="92:  break;"];
  n148  [label="BLOCK"];
  n149  [label="CASE: 'C'"];
  n150  [label="CASE: 'D'"];
  n151  [label="95:  bar = param"];
  n152  [label="96:  break;"];
  n153  [label="BLOCK"];
  n154  [label="DEFAULT"];
  n155  [label="98:  bar = 'bobs_your_uncle'"];
  n156  [label="99:  break;"];
  n157  [label="BLOCK"];
  n158  [label="102:  return bar;"];
  // graph-edges
  n1 -> n2;
  n1 -> n3;
  n3 -> n4;
  n3 -> n5;
  n3 -> n6;
  n3 -> n7;
  n3 -> n8;
  n3 -> n9;
  n1 -> n10;
  n10 -> n11;
  n10 -> n12;
  n10 -> n13;
  n10 -> n14;
  n14 -> n15;
  n14 -> n16;
  n14 -> n17;
  n14 -> n18;
  n10 -> n19;
  n19 -> n20;
  n19 -> n21;
  n19 -> n22;
  n19 -> n23;
  n23 -> n24;
  n24 -> n25;
  n24 -> n26;
  n23 -> n27;
  n27 -> n28;
  n27 -> n29;
  n19 -> n30;
  n30 -> n31;
  n10 -> n32;
  n32 -> n33;
  n32 -> n34;
  n32 -> n35;
  n32 -> n36;
  n36 -> n37;
  n37 -> n38;
  n37 -> n39;
  n36 -> n40;
  n40 -> n41;
  n40 -> n42;
  n32 -> n43;
  n43 -> n44;
  n43 -> n45;
  n45 -> n46;
  n45 -> n47;
  n45 -> n48;
  n43 -> n49;
  n49 -> n50;
  n49 -> n51;
  n49 -> n52;
  n43 -> n53;
  n53 -> n54;
  n53 -> n55;
  n53 -> n56;
  n43 -> n57;
  n57 -> n58;
  n57 -> n59;
  n59 -> n60;
  n60 -> n61;
  n60 -> n62;
  n60 -> n63;
  n59 -> n64;
  n64 -> n65;
  n64 -> n66;
  n64 -> n67;
  n59 -> n68;
  n68 -> n69;
  n68 -> n70;
  n70 -> n71;
  n71 -> n72;
  n71 -> n73;
  n71 -> n74;
  n71 -> n75;
  n75 -> n76;
  n76 -> n77;
  n76 -> n78;
  n76 -> n79;
  n75 -> n80;
  n80 -> n81;
  n80 -> n82;
  n82 -> n83;
  n82 -> n84;
  n43 -> n85;
  n85 -> n86;
  n85 -> n87;
  n85 -> n88;
  n43 -> n89;
  n89 -> n90;
  n89 -> n91;
  n89 -> n92;
  n43 -> n93;
  n93 -> n94;
  n94 -> n95;
  n95 -> n96;
  n95 -> n97;
  n95 -> n98;
  n94 -> n99;
  n99 -> n100;
  n99 -> n101;
  n99 -> n102;
  n94 -> n103;
  n93 -> n104;
  n104 -> n105;
  n104 -> n106;
  n104 -> n107;
  n107 -> n108;
  n108 -> n109;
  n108 -> n110;
  n110 -> n111;
  n110 -> n112;
  n108 -> n113;
  n113 -> n114;
  n10 -> n115;
  n115 -> n116;
  n115 -> n117;
  n115 -> n118;
  n118 -> n119;
  n118 -> n120;
  n118 -> n121;
  n118 -> n122;
  n122 -> n123;
  n123 -> n124;
  n123 -> n125;
  n118 -> n126;
  n126 -> n127;
  n127 -> n128;
  n127 -> n129;
  n126 -> n130;
  n130 -> n131;
  n130 -> n132;
  n130 -> n133;
  n126 -> n134;
  n134 -> n135;
  n134 -> n136;
  n134 -> n137;
  n126 -> n138;
  n138 -> n139;
  n138 -> n141;
  n141 -> n140;
  n140 -> n142;
  n140 -> n143;
  n138 -> n145;
  n145 -> n144;
  n144 -> n146;
  n144 -> n147;
  n138 -> n149;
  n149 -> n148;
  n138 -> n150;
  n150 -> n148;
  n148 -> n151;
  n148 -> n152;
  n138 -> n154;
  n154 -> n153;
  n153 -> n155;
  n153 -> n156;
  n126 -> n158;
  // end-of-graph
}
