digraph BenchmarkTest01816_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request )"];
  v7  [label="44:  String param = scr.getTheValue('vector')"];
  v8  [label="46:  String bar = new Test().doSomething(param)"];
  v9  [label="48:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''+ bar +'''"];
  v10  [label="50:  try"];
  v11  [label="51:  java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement()"];
  v12  [label="52:  statement.addBatch( sql )"];
  v13  [label="53:  int[] counts = statement.executeBatch()"];
  v14  [label="54:  org.owasp.benchmark.helpers.DatabaseHelper.printResults(sql, counts, response)"];
  v15  [label="55:  catch (java.sql.SQLException e)"];
  v16  [label="56:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v17  [label="THEN"];
  v18  [label="57:  response.getWriter().println('Error processing request.')"];
  v19  [label="58:  return;"];
  v20  [label="ELSE"];
  v21  [label="60:  throw new ServletException(e);"];
  v22  [label="exit"];
  v23  [label="66:  String doSomething(String param)"];
  v24  [label="68:  String bar"];
  v25  [label="71:  int num = 106"];
  v26  [label="73:  bar = (7*18) + num > 200 ? 'This_should_always_happen' : param"];
  v27  [label="76:  return bar;"];
  v28  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v4 -> v8;
  v4 -> v9;
  v4 -> v10;
  v10 -> v11;
  v10 -> v12;
  v10 -> v13;
  v10 -> v14;
  v10 -> v15  [label="Throws"];
  v15 -> v16;
  v16 -> v17  [label="True"];
  v17 -> v18;
  v17 -> v19;
  v16 -> v20  [label="False"];
  v20 -> v21;
  v4 -> v22;
  v23 -> v24;
  v23 -> v25;
  v23 -> v26;
  v23 -> v27;
  v23 -> v28;
  // end-of-graph
}
