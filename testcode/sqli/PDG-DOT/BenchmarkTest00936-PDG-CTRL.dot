digraph BenchmarkTest00936_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request )"];
  v7  [label="44:  String param = scr.getTheValue('vector')"];
  v8  [label="47:  String bar"];
  v9  [label="50:  int num = 196"];
  v10  [label="51:  if ( (500/42) + num > 200 )"];
  v11  [label="THEN"];
  v12  [label="52:  bar = param"];
  v13  [label="ELSE"];
  v14  [label="53:  bar = 'This should never happen'"];
  v15  [label="56:  try"];
  v16  [label="57:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''
	            + bar + '''"];
  v17  [label="60:  org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"];
  v18  [label="61:  java.io.PrintWriter out = response.getWriter()"];
  v19  [label="63:  out.write('No results can be displayed for query: ' + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + '<br>')"];
  v20  [label="64:  out.write(' because the Spring batchUpdate method doesn't return results.')"];
  v21  [label="65:  catch (org.springframework.dao.DataAccessException e)"];
  v22  [label="66:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v23  [label="THEN"];
  v24  [label="67:  response.getWriter().println('Error processing request.')"];
  v25  [label="68:  return;"];
  v26  [label="ELSE"];
  v27  [label="70:  throw new ServletException(e);"];
  v28  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v4 -> v8;
  v4 -> v9;
  v4 -> v10;
  v10 -> v11  [label="True"];
  v11 -> v12;
  v10 -> v13  [label="False"];
  v13 -> v14;
  v4 -> v15;
  v15 -> v16;
  v15 -> v17;
  v15 -> v18;
  v15 -> v19;
  v15 -> v20;
  v15 -> v21  [label="Throws"];
  v21 -> v22;
  v22 -> v23  [label="True"];
  v23 -> v24;
  v23 -> v25;
  v22 -> v26  [label="False"];
  v26 -> v27;
  v4 -> v28;
  // end-of-graph
}
