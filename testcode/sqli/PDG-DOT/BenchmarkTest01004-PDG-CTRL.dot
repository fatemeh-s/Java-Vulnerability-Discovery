digraph BenchmarkTest01004_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  javax.servlet.http.Cookie[] theCookies = request.getCookies()"];
  v7  [label="45:  String param = ''"];
  v8  [label="46:  if (theCookies != null)"];
  v9  [label="THEN"];
  v10  [label="47:  for (javax.servlet.http.Cookie theCookie : theCookies)"];
  v11  [label="LOOP"];
  v12  [label="48:  if (theCookie.getName().equals('vector'))"];
  v13  [label="THEN"];
  v14  [label="49:  param = java.net.URLDecoder.decode(theCookie.getValue(), 'UTF-8')"];
  v15  [label="50:  break;"];
  v16  [label="ELSE"];
  v17  [label="ELSE"];
  v18  [label="FOLLOW-1"];
  v19  [label="55:  String bar = new Test().doSomething(param)"];
  v20  [label="57:  String sql = 'SELECT * from USERS where USERNAME=? and PASSWORD=''+ bar +'''"];
  v21  [label="59:  try"];
  v22  [label="60:  java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection()"];
  v23  [label="61:  java.sql.PreparedStatement statement = connection.prepareStatement( sql, new String[] {'Column1','Column2'} )"];
  v24  [label="62:  statement.setString(1, 'foo')"];
  v25  [label="63:  statement.execute()"];
  v26  [label="64:  org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response)"];
  v27  [label="65:  catch (java.sql.SQLException e)"];
  v28  [label="66:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v29  [label="THEN"];
  v30  [label="67:  response.getWriter().println('Error processing request.')"];
  v31  [label="68:  return;"];
  v32  [label="ELSE"];
  v33  [label="70:  throw new ServletException(e);"];
  v34  [label="exit"];
  v35  [label="76:  String doSomething(String param)"];
  v36  [label="78:  String bar"];
  v37  [label="79:  String guess = 'ABC'"];
  v38  [label="80:  char switchTarget = guess.charAt(2)"];
  v39  [label="83:  switch (switchTarget)"];
  v40  [label="84:  case 'A':"];
  v41  [label="THEN"];
  v42  [label="ELSE"];
  v43  [label="85:  bar = param"];
  v44  [label="86:  break;"];
  v45  [label="FOLLOW-1"];
  v46  [label="87:  case 'B':"];
  v47  [label="THEN"];
  v48  [label="ELSE"];
  v49  [label="88:  bar = 'bobs_your_uncle'"];
  v50  [label="89:  break;"];
  v51  [label="FOLLOW-2"];
  v52  [label="90:  case 'C':"];
  v53  [label="THEN"];
  v54  [label="91:  case 'D':"];
  v55  [label="ELSE"];
  v56  [label="92:  bar = param"];
  v57  [label="93:  break;"];
  v58  [label="FOLLOW-3"];
  v59  [label="94:  default:"];
  v60  [label="95:  bar = 'bobs_your_uncle'"];
  v61  [label="96:  break;"];
  v62  [label="99:  return bar;"];
  v63  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v4 -> v8;
  v8 -> v9  [label="True"];
  v9 -> v10;
  v10 -> v11  [label="True"];
  v11 -> v12;
  v12 -> v13  [label="True"];
  v13 -> v14;
  v13 -> v15;
  v12 -> v16  [label="False"];
  v8 -> v17  [label="False"];
  v16 -> v18;
  v18 -> v19;
  v18 -> v20;
  v18 -> v21;
  v21 -> v22;
  v21 -> v23;
  v21 -> v24;
  v21 -> v25;
  v21 -> v26;
  v21 -> v27  [label="Throws"];
  v27 -> v28;
  v28 -> v29  [label="True"];
  v29 -> v30;
  v29 -> v31;
  v28 -> v32  [label="False"];
  v32 -> v33;
  v4 -> v34;
  v35 -> v36;
  v35 -> v37;
  v35 -> v38;
  v35 -> v39;
  v39 -> v40;
  v40 -> v41  [label="True"];
  v41 -> v43;
  v41 -> v44;
  v40 -> v42  [label="False"];
  v42 -> v45;
  v45 -> v46;
  v46 -> v47  [label="True"];
  v47 -> v49;
  v47 -> v50;
  v46 -> v48  [label="False"];
  v48 -> v51;
  v51 -> v52;
  v52 -> v53  [label="True"];
  v52 -> v54  [label="False"];
  v54 -> v53  [label="True"];
  v53 -> v56;
  v53 -> v57;
  v54 -> v55  [label="False"];
  v55 -> v58;
  v58 -> v59;
  v58 -> v60;
  v58 -> v61;
  v35 -> v62;
  v35 -> v63;
  // end-of-graph
}
