digraph BenchmarkTest02274_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  java.util.Map<String,String[]> map = request.getParameterMap()"];
  v7  [label="44:  String param = ''"];
  v8  [label="45:  if (!map.isEmpty())"];
  v9  [label="THEN"];
  v10  [label="46:  String[] values = map.get('vector')"];
  v11  [label="47:  if (values != null)"];
  v12  [label="THEN"];
  v13  [label="47:  param = values[0]"];
  v14  [label="51:  String bar = doSomething(param)"];
  v15  [label="53:  try"];
  v16  [label="54:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD='' + bar + '''"];
  v17  [label="56:  java.util.List<String> results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.query(sql,  new org.springframework.jdbc.core.RowMapper<String>() {
	            public String mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException {
	                try {
	                	return rs.getString('USERNAME');
	                } catch (java.sql.SQLException e) {
	                	if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {
	        				return 'Error processing query.';
	        			}
						else throw e;
					}
	            }
	        })"];
  v18  [label="68:  java.io.PrintWriter out = response.getWriter()"];
  v19  [label="70:  out.write('Your results are: ')"];
  v20  [label="72:  for (String s : results)"];
  v21  [label="LOOP"];
  v22  [label="73:  out.write(org.owasp.esapi.ESAPI.encoder().encodeForHTML(s) + '<br>')"];
  v23  [label="76:  catch (org.springframework.dao.DataAccessException e)"];
  v24  [label="77:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v25  [label="THEN"];
  v26  [label="78:  response.getWriter().println('Error processing request.')"];
  v27  [label="79:  return;"];
  v28  [label="ELSE"];
  v29  [label="81:  throw new ServletException(e);"];
  v30  [label="exit"];
  v31  [label="85:  String doSomething(String param)"];
  v32  [label="87:  String bar"];
  v33  [label="88:  String guess = 'ABC'"];
  v34  [label="89:  char switchTarget = guess.charAt(1)"];
  v35  [label="92:  switch (switchTarget)"];
  v36  [label="93:  case 'A':"];
  v37  [label="THEN"];
  v38  [label="ELSE"];
  v39  [label="94:  bar = param"];
  v40  [label="95:  break;"];
  v41  [label="FOLLOW-1"];
  v42  [label="96:  case 'B':"];
  v43  [label="THEN"];
  v44  [label="ELSE"];
  v45  [label="97:  bar = 'bob'"];
  v46  [label="98:  break;"];
  v47  [label="FOLLOW-2"];
  v48  [label="99:  case 'C':"];
  v49  [label="THEN"];
  v50  [label="100:  case 'D':"];
  v51  [label="ELSE"];
  v52  [label="101:  bar = param"];
  v53  [label="102:  break;"];
  v54  [label="FOLLOW-3"];
  v55  [label="103:  default:"];
  v56  [label="104:  bar = 'bob's your uncle'"];
  v57  [label="105:  break;"];
  v58  [label="108:  return bar;"];
  v59  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v4 -> v8;
  v8 -> v9  [label="True"];
  v9 -> v10;
  v9 -> v11;
  v11 -> v12  [label="True"];
  v12 -> v13;
  v4 -> v14;
  v4 -> v15;
  v15 -> v16;
  v15 -> v17;
  v15 -> v18;
  v15 -> v19;
  v15 -> v20;
  v20 -> v21  [label="True"];
  v21 -> v22;
  v15 -> v23  [label="Throws"];
  v23 -> v24;
  v24 -> v25  [label="True"];
  v25 -> v26;
  v25 -> v27;
  v24 -> v28  [label="False"];
  v28 -> v29;
  v4 -> v30;
  v31 -> v32;
  v31 -> v33;
  v31 -> v34;
  v31 -> v35;
  v35 -> v36;
  v36 -> v37  [label="True"];
  v37 -> v39;
  v37 -> v40;
  v36 -> v38  [label="False"];
  v38 -> v41;
  v41 -> v42;
  v42 -> v43  [label="True"];
  v43 -> v45;
  v43 -> v46;
  v42 -> v44  [label="False"];
  v44 -> v47;
  v47 -> v48;
  v48 -> v49  [label="True"];
  v48 -> v50  [label="False"];
  v50 -> v49  [label="True"];
  v49 -> v52;
  v49 -> v53;
  v50 -> v51  [label="False"];
  v51 -> v54;
  v54 -> v55;
  v54 -> v56;
  v54 -> v57;
  v31 -> v58;
  v31 -> v59;
  // end-of-graph
}
