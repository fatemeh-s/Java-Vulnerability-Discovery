digraph BenchmarkTest00762_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  String[] values = request.getParameterValues('vector')"];
  v7  [label="44:  String param"];
  v8  [label="45:  if (values != null && values.length > 0)"];
  v9  [label="THEN"];
  v10  [label="46:  param = values[0]"];
  v11  [label="ELSE"];
  v12  [label="47:  param = ''"];
  v13  [label="50:  String bar"];
  v14  [label="53:  int num = 196"];
  v15  [label="54:  if ( (500/42) + num > 200 )"];
  v16  [label="THEN"];
  v17  [label="55:  bar = param"];
  v18  [label="ELSE"];
  v19  [label="56:  bar = 'This should never happen'"];
  v20  [label="59:  String sql = '{call ' + bar + '}'"];
  v21  [label="61:  try"];
  v22  [label="62:  java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection()"];
  v23  [label="63:  java.sql.CallableStatement statement = connection.prepareCall( sql, java.sql.ResultSet.TYPE_FORWARD_ONLY, 
							java.sql.ResultSet.CONCUR_READ_ONLY, java.sql.ResultSet.CLOSE_CURSORS_AT_COMMIT )"];
  v24  [label="65:  java.sql.ResultSet rs = statement.executeQuery()"];
  v25  [label="66:  org.owasp.benchmark.helpers.DatabaseHelper.printResults(rs, sql, response)"];
  v26  [label="67:  catch (java.sql.SQLException e)"];
  v27  [label="68:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v28  [label="THEN"];
  v29  [label="69:  response.getWriter().println('Error processing request.')"];
  v30  [label="70:  return;"];
  v31  [label="ELSE"];
  v32  [label="72:  throw new ServletException(e);"];
  v33  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v4 -> v8;
  v8 -> v9  [label="True"];
  v9 -> v10;
  v8 -> v11  [label="False"];
  v11 -> v12;
  v4 -> v13;
  v4 -> v14;
  v4 -> v15;
  v15 -> v16  [label="True"];
  v16 -> v17;
  v15 -> v18  [label="False"];
  v18 -> v19;
  v4 -> v20;
  v4 -> v21;
  v21 -> v22;
  v21 -> v23;
  v21 -> v24;
  v21 -> v25;
  v21 -> v26  [label="Throws"];
  v26 -> v27;
  v27 -> v28  [label="True"];
  v28 -> v29;
  v28 -> v30;
  v27 -> v31  [label="False"];
  v31 -> v32;
  v4 -> v33;
  // end-of-graph
}
