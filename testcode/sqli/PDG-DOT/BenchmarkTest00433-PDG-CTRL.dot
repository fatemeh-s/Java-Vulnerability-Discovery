digraph BenchmarkTest00433_PDG_CTRL {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="exit"];
  v4  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v5  [label="41:  response.setContentType('text/html')"];
  v6  [label="43:  String param = request.getParameter('vector')"];
  v7  [label="44:  if (param == null)"];
  v8  [label="THEN"];
  v9  [label="44:  param = ''"];
  v10  [label="47:  String bar"];
  v11  [label="50:  int num = 196"];
  v12  [label="51:  if ( (500/42) + num > 200 )"];
  v13  [label="THEN"];
  v14  [label="52:  bar = param"];
  v15  [label="ELSE"];
  v16  [label="53:  bar = 'This should never happen'"];
  v17  [label="56:  try"];
  v18  [label="57:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''
	            + bar + '''"];
  v19  [label="60:  java.util.List list = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForList(sql)"];
  v20  [label="61:  java.io.PrintWriter out = response.getWriter()"];
  v21  [label="62:  out.write('Your results are: <br>')"];
  v22  [label="65:  for (Object o:list)"];
  v23  [label="LOOP"];
  v24  [label="66:  out.write(org.owasp.esapi.ESAPI.encoder().encodeForHTML(o.toString()) + '<br>')"];
  v25  [label="69:  catch (org.springframework.dao.DataAccessException e)"];
  v26  [label="70:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v27  [label="THEN"];
  v28  [label="71:  response.getWriter().println('Error processing request.')"];
  v29  [label="72:  return;"];
  v30  [label="ELSE"];
  v31  [label="74:  throw new ServletException(e);"];
  v32  [label="exit"];
  // graph-edges
  v1 -> v2;
  v1 -> v3;
  v4 -> v5;
  v4 -> v6;
  v4 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v4 -> v10;
  v4 -> v11;
  v4 -> v12;
  v12 -> v13  [label="True"];
  v13 -> v14;
  v12 -> v15  [label="False"];
  v15 -> v16;
  v4 -> v17;
  v17 -> v18;
  v17 -> v19;
  v17 -> v20;
  v17 -> v21;
  v17 -> v22;
  v22 -> v23  [label="True"];
  v23 -> v24;
  v17 -> v25  [label="Throws"];
  v25 -> v26;
  v26 -> v27  [label="True"];
  v27 -> v28;
  v27 -> v29;
  v26 -> v30  [label="False"];
  v30 -> v31;
  v4 -> v32;
  // end-of-graph
}
