digraph BenchmarkTest02180_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String param = request.getParameter('vector')"];
  v6  [label="44:  if (param == null)"];
  v7  [label="44:  param = ''"];
  v8  [label="endif"];
  v9  [label="46:  String bar = doSomething(param)"];
  v10  [label="48:  try"];
  v11  [label="end-try"];
  v12  [label="49:  String sql = 'SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD=''+ bar + '''"];
  v13  [label="51:  Long results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForLong(sql)"];
  v14  [label="52:  java.io.PrintWriter out = response.getWriter()"];
  v15  [label="53:  out.write('Your results are: ')"];
  v16  [label="55:  out.write(results.toString())"];
  v17  [label="end-catch"];
  v18  [label="57:  catch (org.springframework.dao.DataAccessException e)"];
  v19  [label="58:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v20  [label="59:  response.getWriter().println('Error processing request.')"];
  v21  [label="60:  return;"];
  v22  [label="endif"];
  v23  [label="62:  throw new ServletException(e)"];
  v24  [label="66:  String doSomething(String param)"];
  v25  [label="68:  String bar = 'safe!'"];
  v26  [label="69:  java.util.HashMap<String,Object> map69715 = new java.util.HashMap<String,Object>()"];
  v27  [label="70:  map69715.put('keyA-69715', 'a_Value')"];
  v28  [label="71:  map69715.put('keyB-69715', param)"];
  v29  [label="72:  map69715.put('keyC', 'another_Value')"];
  v30  [label="73:  bar = (String)map69715.get('keyB-69715')"];
  v31  [label="74:  bar = (String)map69715.get('keyA-69715')"];
  v32  [label="76:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7  [label="True"];
  v7 -> v8;
  v6 -> v8  [label="False"];
  v8 -> v9;
  v9 -> v10;
  v10 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v11;
  v11 -> v18  [label="Throws"];
  v18 -> v19;
  v19 -> v20  [label="True"];
  v20 -> v21;
  v19 -> v23  [label="False"];
  v23 -> v11  [label="Throws"];
  v22 -> v17;
  v17 -> v11;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  // end-of-graph
}
