digraph BenchmarkTest00771_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String[] values = request.getParameterValues('vector')"];
  v6  [label="44:  String param"];
  v7  [label="45:  if (values != null && values.length > 0)"];
  v8  [label="46:  param = values[0]"];
  v9  [label="endif"];
  v10  [label="47:  param = ''"];
  v11  [label="50:  String bar = 'safe!'"];
  v12  [label="51:  java.util.HashMap<String,Object> map16111 = new java.util.HashMap<String,Object>()"];
  v13  [label="52:  map16111.put('keyA-16111', 'a Value')"];
  v14  [label="53:  map16111.put('keyB-16111', param)"];
  v15  [label="54:  map16111.put('keyC', 'another Value')"];
  v16  [label="55:  bar = (String)map16111.get('keyB-16111')"];
  v17  [label="58:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''+ bar +'''"];
  v18  [label="60:  try"];
  v19  [label="end-try"];
  v20  [label="61:  java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement()"];
  v21  [label="62:  statement.execute( sql )"];
  v22  [label="63:  org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response)"];
  v23  [label="end-catch"];
  v24  [label="64:  catch (java.sql.SQLException e)"];
  v25  [label="65:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v26  [label="66:  response.getWriter().println('Error processing request.')"];
  v27  [label="67:  return;"];
  v28  [label="endif"];
  v29  [label="69:  throw new ServletException(e)"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v10  [label="False"];
  v10 -> v9;
  v9 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v20;
  v20 -> v21;
  v21 -> v22;
  v22 -> v19;
  v19 -> v24  [label="Throws"];
  v24 -> v25;
  v25 -> v26  [label="True"];
  v26 -> v27;
  v25 -> v29  [label="False"];
  v29 -> v19  [label="Throws"];
  v28 -> v23;
  v23 -> v19;
  // end-of-graph
}
