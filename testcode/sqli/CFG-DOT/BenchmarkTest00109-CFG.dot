digraph BenchmarkTest00109_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  javax.servlet.http.Cookie[] theCookies = request.getCookies()"];
  v6  [label="45:  String param = ''"];
  v7  [label="46:  if (theCookies != null)"];
  v8  [label="47:  for (javax.servlet.http.Cookie theCookie : theCookies)"];
  v9  [label="endfor"];
  v10  [label="48:  if (theCookie.getName().equals('vector'))"];
  v11  [label="49:  param = java.net.URLDecoder.decode(theCookie.getValue(), 'UTF-8')"];
  v12  [label="50:  break;"];
  v13  [label="endif"];
  v14  [label="endif"];
  v15  [label="56:  String bar = ''"];
  v16  [label="57:  if (param != null)"];
  v17  [label="58:  bar = new String( new sun.misc.BASE64Decoder().decodeBuffer( 
		    	new sun.misc.BASE64Encoder().encode( param.getBytes() ) ))"];
  v18  [label="endif"];
  v19  [label="63:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''+ bar +'''"];
  v20  [label="65:  try"];
  v21  [label="end-try"];
  v22  [label="66:  java.sql.Statement statement =  org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement()"];
  v23  [label="67:  statement.execute( sql, new String[] { 'username', 'password' } )"];
  v24  [label="68:  org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response)"];
  v25  [label="end-catch"];
  v26  [label="69:  catch (java.sql.SQLException e)"];
  v27  [label="70:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v28  [label="71:  response.getWriter().println('Error processing request.')"];
  v29  [label="72:  return;"];
  v30  [label="endif"];
  v31  [label="74:  throw new ServletException(e)"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9  [label="False"];
  v8 -> v10  [label="True"];
  v10 -> v11  [label="True"];
  v11 -> v12;
  v12 -> v9;
  v10 -> v13  [label="False"];
  v13 -> v8;
  v9 -> v14;
  v7 -> v14  [label="False"];
  v14 -> v15;
  v15 -> v16;
  v16 -> v17  [label="True"];
  v17 -> v18;
  v16 -> v18  [label="False"];
  v18 -> v19;
  v19 -> v20;
  v20 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v21;
  v21 -> v26  [label="Throws"];
  v26 -> v27;
  v27 -> v28  [label="True"];
  v28 -> v29;
  v27 -> v31  [label="False"];
  v31 -> v21  [label="Throws"];
  v30 -> v25;
  v25 -> v21;
  // end-of-graph
}
