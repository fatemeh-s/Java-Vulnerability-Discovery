digraph BenchmarkTest01210_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String param = ''"];
  v6  [label="44:  java.util.Enumeration<String> headers = request.getHeaders('vector')"];
  v7  [label="45:  if (headers.hasMoreElements())"];
  v8  [label="46:  param = headers.nextElement()"];
  v9  [label="endif"];
  v10  [label="48:  param = java.net.URLDecoder.decode(param, 'UTF-8')"];
  v11  [label="51:  String bar = new Test().doSomething(param)"];
  v12  [label="53:  String sql = 'SELECT * from USERS where USERNAME=? and PASSWORD=''+ bar +'''"];
  v13  [label="55:  try"];
  v14  [label="end-try"];
  v15  [label="56:  java.sql.Connection connection = org.owasp.benchmark.helpers.DatabaseHelper.getSqlConnection()"];
  v16  [label="57:  java.sql.PreparedStatement statement = connection.prepareStatement( sql,
				java.sql.ResultSet.TYPE_FORWARD_ONLY, java.sql.ResultSet.CONCUR_READ_ONLY )"];
  v17  [label="59:  statement.setString(1, 'foo')"];
  v18  [label="60:  statement.execute()"];
  v19  [label="61:  org.owasp.benchmark.helpers.DatabaseHelper.printResults(statement, sql, response)"];
  v20  [label="end-catch"];
  v21  [label="62:  catch (java.sql.SQLException e)"];
  v22  [label="63:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v23  [label="64:  response.getWriter().println('Error processing request.')"];
  v24  [label="65:  return;"];
  v25  [label="endif"];
  v26  [label="67:  throw new ServletException(e)"];
  v27  [label="73:  String doSomething(String param)"];
  v28  [label="75:  String bar = 'safe!'"];
  v29  [label="76:  java.util.HashMap<String,Object> map84096 = new java.util.HashMap<String,Object>()"];
  v30  [label="77:  map84096.put('keyA-84096', 'a Value')"];
  v31  [label="78:  map84096.put('keyB-84096', param)"];
  v32  [label="79:  map84096.put('keyC', 'another Value')"];
  v33  [label="80:  bar = (String)map84096.get('keyB-84096')"];
  v34  [label="82:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v14;
  v14 -> v21  [label="Throws"];
  v21 -> v22;
  v22 -> v23  [label="True"];
  v23 -> v24;
  v22 -> v26  [label="False"];
  v26 -> v14  [label="Throws"];
  v25 -> v20;
  v20 -> v14;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  // end-of-graph
}
