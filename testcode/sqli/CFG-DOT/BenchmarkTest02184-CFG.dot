digraph BenchmarkTest02184_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String param = request.getParameter('vector')"];
  v6  [label="44:  if (param == null)"];
  v7  [label="44:  param = ''"];
  v8  [label="endif"];
  v9  [label="46:  String bar = doSomething(param)"];
  v10  [label="48:  try"];
  v11  [label="end-try"];
  v12  [label="49:  String sql = 'SELECT  * from USERS where USERNAME='foo' and PASSWORD=''+ bar + '''"];
  v13  [label="51:  org.springframework.jdbc.support.rowset.SqlRowSet results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"];
  v14  [label="52:  java.io.PrintWriter out = response.getWriter()"];
  v15  [label="53:  out.write('Your results are: ')"];
  v16  [label="55:  while (results.next())"];
  v17  [label="endwhile"];
  v18  [label="56:  out.write(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.getString('USERNAME')) + ' ')"];
  v19  [label="end-catch"];
  v20  [label="59:  catch (org.springframework.dao.DataAccessException e)"];
  v21  [label="60:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v22  [label="61:  response.getWriter().println('Error processing request.')"];
  v23  [label="62:  return;"];
  v24  [label="endif"];
  v25  [label="64:  throw new ServletException(e)"];
  v26  [label="68:  String doSomething(String param)"];
  v27  [label="70:  String bar = 'alsosafe'"];
  v28  [label="71:  if (param != null)"];
  v29  [label="72:  java.util.List<String> valuesList = new java.util.ArrayList<String>( )"];
  v30  [label="73:  valuesList.add('safe')"];
  v31  [label="74:  valuesList.add( param )"];
  v32  [label="75:  valuesList.add( 'moresafe' )"];
  v33  [label="77:  valuesList.remove(0)"];
  v34  [label="79:  bar = valuesList.get(1)"];
  v35  [label="endif"];
  v36  [label="82:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7  [label="True"];
  v7 -> v8;
  v6 -> v8  [label="False"];
  v8 -> v9;
  v9 -> v10;
  v10 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17  [label="False"];
  v16 -> v18  [label="True"];
  v18 -> v16;
  v17 -> v11;
  v11 -> v20  [label="Throws"];
  v20 -> v21;
  v21 -> v22  [label="True"];
  v22 -> v23;
  v21 -> v25  [label="False"];
  v25 -> v11  [label="Throws"];
  v24 -> v19;
  v19 -> v11;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29  [label="True"];
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v28 -> v35  [label="False"];
  v35 -> v36;
  // end-of-graph
}
