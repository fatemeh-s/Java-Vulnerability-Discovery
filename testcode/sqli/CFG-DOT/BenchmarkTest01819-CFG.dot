digraph BenchmarkTest01819_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request )"];
  v6  [label="44:  String param = scr.getTheValue('vector')"];
  v7  [label="46:  String bar = new Test().doSomething(param)"];
  v8  [label="48:  String sql = 'INSERT INTO users (username, password) VALUES ('foo',''+ bar + '')'"];
  v9  [label="50:  try"];
  v10  [label="end-try"];
  v11  [label="51:  java.sql.Statement statement = org.owasp.benchmark.helpers.DatabaseHelper.getSqlStatement()"];
  v12  [label="52:  int count = statement.executeUpdate( sql )"];
  v13  [label="53:  org.owasp.benchmark.helpers.DatabaseHelper.outputUpdateComplete(sql, response)"];
  v14  [label="end-catch"];
  v15  [label="54:  catch (java.sql.SQLException e)"];
  v16  [label="55:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v17  [label="56:  response.getWriter().println('Error processing request.')"];
  v18  [label="57:  return;"];
  v19  [label="endif"];
  v20  [label="59:  throw new ServletException(e)"];
  v21  [label="65:  String doSomething(String param)"];
  v22  [label="67:  String bar = 'safe!'"];
  v23  [label="68:  java.util.HashMap<String,Object> map60708 = new java.util.HashMap<String,Object>()"];
  v24  [label="69:  map60708.put('keyA-60708', 'a Value')"];
  v25  [label="70:  map60708.put('keyB-60708', param)"];
  v26  [label="71:  map60708.put('keyC', 'another Value')"];
  v27  [label="72:  bar = (String)map60708.get('keyB-60708')"];
  v28  [label="74:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9;
  v9 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v10;
  v10 -> v15  [label="Throws"];
  v15 -> v16;
  v16 -> v17  [label="True"];
  v17 -> v18;
  v16 -> v20  [label="False"];
  v20 -> v10  [label="Throws"];
  v19 -> v14;
  v14 -> v10;
  v21 -> v22;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  // end-of-graph
}
