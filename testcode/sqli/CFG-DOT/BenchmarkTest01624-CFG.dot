digraph BenchmarkTest01624_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String[] values = request.getParameterValues('vector')"];
  v6  [label="44:  String param"];
  v7  [label="45:  if (values != null && values.length > 0)"];
  v8  [label="46:  param = values[0]"];
  v9  [label="endif"];
  v10  [label="47:  param = ''"];
  v11  [label="49:  String bar = new Test().doSomething(param)"];
  v12  [label="51:  try"];
  v13  [label="end-try"];
  v14  [label="52:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''
	            + bar + '''"];
  v15  [label="55:  org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"];
  v16  [label="56:  java.io.PrintWriter out = response.getWriter()"];
  v17  [label="58:  out.write('No results can be displayed for query: ' + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + '<br>')"];
  v18  [label="59:  out.write(' because the Spring batchUpdate method doesn't return results.')"];
  v19  [label="end-catch"];
  v20  [label="60:  catch (org.springframework.dao.DataAccessException e)"];
  v21  [label="61:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v22  [label="62:  response.getWriter().println('Error processing request.')"];
  v23  [label="63:  return;"];
  v24  [label="endif"];
  v25  [label="65:  throw new ServletException(e)"];
  v26  [label="71:  String doSomething(String param)"];
  v27  [label="73:  String bar = ''"];
  v28  [label="74:  if (param != null)"];
  v29  [label="75:  java.util.List<String> valuesList = new java.util.ArrayList<String>( )"];
  v30  [label="76:  valuesList.add('safe')"];
  v31  [label="77:  valuesList.add( param )"];
  v32  [label="78:  valuesList.add( 'moresafe' )"];
  v33  [label="80:  valuesList.remove(0)"];
  v34  [label="82:  bar = valuesList.get(0)"];
  v35  [label="endif"];
  v36  [label="85:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v10  [label="False"];
  v10 -> v9;
  v9 -> v11;
  v11 -> v12;
  v12 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v13;
  v13 -> v20  [label="Throws"];
  v20 -> v21;
  v21 -> v22  [label="True"];
  v22 -> v23;
  v21 -> v25  [label="False"];
  v25 -> v13  [label="Throws"];
  v24 -> v19;
  v19 -> v13;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29  [label="True"];
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  v33 -> v34;
  v34 -> v35;
  v28 -> v35  [label="False"];
  v35 -> v36;
  // end-of-graph
}
