digraph BenchmarkTest01811_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request )"];
  v6  [label="44:  String param = scr.getTheValue('vector')"];
  v7  [label="46:  String bar = new Test().doSomething(param)"];
  v8  [label="48:  try"];
  v9  [label="end-try"];
  v10  [label="49:  String sql = 'SELECT TOP 1 userid from USERS where USERNAME='foo' and PASSWORD=''+ bar + '''"];
  v11  [label="51:  java.util.Map results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForMap(sql)"];
  v12  [label="52:  java.io.PrintWriter out = response.getWriter()"];
  v13  [label="53:  out.write('Your results are: ')"];
  v14  [label="55:  out.write(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.toString()))"];
  v15  [label="end-catch"];
  v16  [label="57:  catch (org.springframework.dao.DataAccessException e)"];
  v17  [label="58:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v18  [label="59:  response.getWriter().println('Error processing request.')"];
  v19  [label="60:  return;"];
  v20  [label="endif"];
  v21  [label="62:  throw new ServletException(e)"];
  v22  [label="68:  String doSomething(String param)"];
  v23  [label="70:  String bar = 'safe!'"];
  v24  [label="71:  java.util.HashMap<String,Object> map10502 = new java.util.HashMap<String,Object>()"];
  v25  [label="72:  map10502.put('keyA-10502', 'a_Value')"];
  v26  [label="73:  map10502.put('keyB-10502', param)"];
  v27  [label="74:  map10502.put('keyC', 'another_Value')"];
  v28  [label="75:  bar = (String)map10502.get('keyB-10502')"];
  v29  [label="76:  bar = (String)map10502.get('keyA-10502')"];
  v30  [label="78:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v9;
  v9 -> v16  [label="Throws"];
  v16 -> v17;
  v17 -> v18  [label="True"];
  v18 -> v19;
  v17 -> v21  [label="False"];
  v21 -> v9  [label="Throws"];
  v20 -> v15;
  v15 -> v9;
  v22 -> v23;
  v23 -> v24;
  v24 -> v25;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  // end-of-graph
}
