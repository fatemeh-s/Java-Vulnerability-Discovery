digraph BenchmarkTest00339_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String param = ''"];
  v6  [label="44:  java.util.Enumeration<String> headers = request.getHeaders('vector')"];
  v7  [label="45:  if (headers.hasMoreElements())"];
  v8  [label="46:  param = headers.nextElement()"];
  v9  [label="endif"];
  v10  [label="48:  param = java.net.URLDecoder.decode(param, 'UTF-8')"];
  v11  [label="52:  String bar"];
  v12  [label="55:  int num = 106"];
  v13  [label="57:  bar = (7*42) - num > 200 ? 'This should never happen' : param"];
  v14  [label="61:  try"];
  v15  [label="end-try"];
  v16  [label="62:  String sql = 'SELECT  * from USERS where USERNAME='foo' and PASSWORD=''+ bar + '''"];
  v17  [label="64:  org.springframework.jdbc.support.rowset.SqlRowSet results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql)"];
  v18  [label="65:  java.io.PrintWriter out = response.getWriter()"];
  v19  [label="66:  out.write('Your results are: ')"];
  v20  [label="68:  while (results.next())"];
  v21  [label="endwhile"];
  v22  [label="69:  out.write(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.getString('USERNAME')) + ' ')"];
  v23  [label="end-catch"];
  v24  [label="72:  catch (org.springframework.dao.DataAccessException e)"];
  v25  [label="73:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v26  [label="74:  response.getWriter().println('Error processing request.')"];
  v27  [label="75:  return;"];
  v28  [label="endif"];
  v29  [label="77:  throw new ServletException(e)"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11;
  v11 -> v12;
  v12 -> v13;
  v13 -> v14;
  v14 -> v16;
  v16 -> v17;
  v17 -> v18;
  v18 -> v19;
  v19 -> v20;
  v20 -> v21  [label="False"];
  v20 -> v22  [label="True"];
  v22 -> v20;
  v21 -> v15;
  v15 -> v24  [label="Throws"];
  v24 -> v25;
  v25 -> v26  [label="True"];
  v26 -> v27;
  v25 -> v29  [label="False"];
  v29 -> v15  [label="Throws"];
  v28 -> v23;
  v23 -> v15;
  // end-of-graph
}
