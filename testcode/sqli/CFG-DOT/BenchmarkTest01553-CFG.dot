digraph BenchmarkTest01553_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  org.owasp.benchmark.helpers.SeparateClassRequest scr = new org.owasp.benchmark.helpers.SeparateClassRequest( request )"];
  v6  [label="44:  String param = scr.getTheParameter('vector')"];
  v7  [label="45:  if (param == null)"];
  v8  [label="45:  param = ''"];
  v9  [label="endif"];
  v10  [label="47:  String bar = new Test().doSomething(param)"];
  v11  [label="49:  try"];
  v12  [label="end-try"];
  v13  [label="50:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''
	            + bar + '''"];
  v14  [label="53:  org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.execute(sql)"];
  v15  [label="54:  java.io.PrintWriter out = response.getWriter()"];
  v16  [label="56:  out.write('No results can be displayed for query: ' + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + '<br>')"];
  v17  [label="57:  out.write(' because the Spring execute method doesn't return results.')"];
  v18  [label="end-catch"];
  v19  [label="58:  catch (org.springframework.dao.DataAccessException e)"];
  v20  [label="59:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v21  [label="60:  response.getWriter().println('Error processing request.')"];
  v22  [label="61:  return;"];
  v23  [label="endif"];
  v24  [label="63:  throw new ServletException(e)"];
  v25  [label="69:  String doSomething(String param)"];
  v26  [label="71:  String bar = 'safe!'"];
  v27  [label="72:  java.util.HashMap<String,Object> map45686 = new java.util.HashMap<String,Object>()"];
  v28  [label="73:  map45686.put('keyA-45686', 'a_Value')"];
  v29  [label="74:  map45686.put('keyB-45686', param)"];
  v30  [label="75:  map45686.put('keyC', 'another_Value')"];
  v31  [label="76:  bar = (String)map45686.get('keyB-45686')"];
  v32  [label="77:  bar = (String)map45686.get('keyA-45686')"];
  v33  [label="79:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8  [label="True"];
  v8 -> v9;
  v7 -> v9  [label="False"];
  v9 -> v10;
  v10 -> v11;
  v11 -> v13;
  v13 -> v14;
  v14 -> v15;
  v15 -> v16;
  v16 -> v17;
  v17 -> v12;
  v12 -> v19  [label="Throws"];
  v19 -> v20;
  v20 -> v21  [label="True"];
  v21 -> v22;
  v20 -> v24  [label="False"];
  v24 -> v12  [label="Throws"];
  v23 -> v18;
  v18 -> v12;
  v25 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v31;
  v31 -> v32;
  v32 -> v33;
  // end-of-graph
}
