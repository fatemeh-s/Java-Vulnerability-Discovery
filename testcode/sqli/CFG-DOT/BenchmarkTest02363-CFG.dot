digraph BenchmarkTest02363_CFG {
  // graph-vertices
  v1  [label="35:  void doGet(HttpServletRequest request, HttpServletResponse response)"];
  v2  [label="36:  doPost(request, response)"];
  v3  [label="40:  void doPost(HttpServletRequest request, HttpServletResponse response)"];
  v4  [label="41:  response.setContentType('text/html')"];
  v5  [label="43:  String param = ''"];
  v6  [label="44:  boolean flag = true"];
  v7  [label="45:  java.util.Enumeration<String> names = request.getParameterNames()"];
  v8  [label="46:  while (names.hasMoreElements() && flag)"];
  v9  [label="endwhile"];
  v10  [label="47:  String name = (String) names.nextElement()"];
  v11  [label="48:  String[] values = request.getParameterValues(name)"];
  v12  [label="49:  if (values != null)"];
  v13  [label="50:  int i=0"];
  v14  [label="50:  for (i<values.length && flag)"];
  v15  [label="50:  i++"];
  v16  [label="endfor"];
  v17  [label="51:  String value = values[i]"];
  v18  [label="52:  if (value.equals('vector'))"];
  v19  [label="53:  param = name"];
  v20  [label="54:  flag = false"];
  v21  [label="endif"];
  v22  [label="endif"];
  v23  [label="60:  String bar = doSomething(param)"];
  v24  [label="62:  try"];
  v25  [label="end-try"];
  v26  [label="63:  String sql = 'SELECT * from USERS where USERNAME='foo' and PASSWORD=''
	            + bar + '''"];
  v27  [label="66:  org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.batchUpdate(sql)"];
  v28  [label="67:  java.io.PrintWriter out = response.getWriter()"];
  v29  [label="69:  out.write('No results can be displayed for query: ' + org.owasp.esapi.ESAPI.encoder().encodeForHTML(sql) + '<br>')"];
  v30  [label="70:  out.write(' because the Spring batchUpdate method doesn't return results.')"];
  v31  [label="end-catch"];
  v32  [label="71:  catch (org.springframework.dao.DataAccessException e)"];
  v33  [label="72:  if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors)"];
  v34  [label="73:  response.getWriter().println('Error processing request.')"];
  v35  [label="74:  return;"];
  v36  [label="endif"];
  v37  [label="76:  throw new ServletException(e)"];
  v38  [label="80:  String doSomething(String param)"];
  v39  [label="83:  String a42515 = param"];
  v40  [label="84:  StringBuilder b42515 = new StringBuilder(a42515)"];
  v41  [label="85:  b42515.append(' SafeStuff')"];
  v42  [label="86:  b42515.replace(b42515.length()-'Chars'.length(),b42515.length(),'Chars')"];
  v43  [label="87:  java.util.HashMap<String,Object> map42515 = new java.util.HashMap<String,Object>()"];
  v44  [label="88:  map42515.put('key42515', b42515.toString())"];
  v45  [label="89:  String c42515 = (String)map42515.get('key42515')"];
  v46  [label="90:  String d42515 = c42515.substring(0,c42515.length()-1)"];
  v47  [label="91:  String e42515 = new String( new sun.misc.BASE64Decoder().decodeBuffer( 
		    new sun.misc.BASE64Encoder().encode( d42515.getBytes() ) ))"];
  v48  [label="93:  String f42515 = e42515.split(' ')[0]"];
  v49  [label="94:  org.owasp.benchmark.helpers.ThingInterface thing = org.owasp.benchmark.helpers.ThingFactory.createThing()"];
  v50  [label="95:  String g42515 = 'barbarians_at_the_gate'"];
  v51  [label="96:  String bar = thing.doSomething(g42515)"];
  v52  [label="98:  return bar;"];
  // graph-edges
  v1 -> v2;
  v3 -> v4;
  v4 -> v5;
  v5 -> v6;
  v6 -> v7;
  v7 -> v8;
  v8 -> v9  [label="False"];
  v8 -> v10  [label="True"];
  v10 -> v11;
  v11 -> v12;
  v12 -> v13  [label="True"];
  v13 -> v14;
  v14 -> v16  [label="False"];
  v14 -> v17  [label="True"];
  v17 -> v18;
  v18 -> v19  [label="True"];
  v19 -> v20;
  v20 -> v21;
  v18 -> v21  [label="False"];
  v21 -> v15;
  v15 -> v14;
  v16 -> v22;
  v12 -> v22  [label="False"];
  v22 -> v8;
  v9 -> v23;
  v23 -> v24;
  v24 -> v26;
  v26 -> v27;
  v27 -> v28;
  v28 -> v29;
  v29 -> v30;
  v30 -> v25;
  v25 -> v32  [label="Throws"];
  v32 -> v33;
  v33 -> v34  [label="True"];
  v34 -> v35;
  v33 -> v37  [label="False"];
  v37 -> v25  [label="Throws"];
  v36 -> v31;
  v31 -> v25;
  v38 -> v39;
  v39 -> v40;
  v40 -> v41;
  v41 -> v42;
  v42 -> v43;
  v43 -> v44;
  v44 -> v45;
  v45 -> v46;
  v46 -> v47;
  v47 -> v48;
  v48 -> v49;
  v49 -> v50;
  v50 -> v51;
  v51 -> v52;
  // end-of-graph
}
