/*** In The Name of Allah ***/
package ghaffarian.progex.graphs.ast;

import ghaffarian.graphs.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.LinkedHashMap;
import java.util.Map;

import org.antlr.v4.codegen.SourceGenTriggers;

import ghaffarian.progex.graphs.cfg.CFEdge;
import ghaffarian.progex.graphs.cfg.CFNode;
import ghaffarian.progex.utils.StringUtils;
import ghaffarian.nanologger.Logger;

/**
 * Abstract Syntax Tree (AST).
 * 
 * @author Seyed Mohammad Ghaffarian
 */
public class AbstractSyntaxTree extends Digraph<ASNode, ASEdge> {
    
    public final String FILE_PATH;
    
    public final ASNode ROOT;
	
    /**
     * Construct a new empty Abstract Syntax Tree, 
     * for the given source-code file-path.
     */
	public AbstractSyntaxTree(String path) {
		super();
        FILE_PATH = path;
        ROOT = new ASNode(ASNode.Type.ROOT);
        addVertex(ROOT);
	}
    
    /**
     * Copy constructor.
     */
    public AbstractSyntaxTree(AbstractSyntaxTree ast) {
        super(ast);
        ROOT = ast.ROOT;
        FILE_PATH = ast.FILE_PATH;
    }
    
	/**
	 * Export this Abstract Syntax Tree (AST) to specified file format.
	 */
	public void export(String format, String outDir) throws FileNotFoundException {
		switch (format.toLowerCase()) {
			case "dot":
				exportDOT(outDir);
				break;
			case "json":
				exportJSON(outDir);
				break;
		}
	}
    
	/**
	 * Export this Abstract Syntax Tree (AST) to JSON format.
	 * The JSON file will be saved in current working directory.
	 */
    public void exportJSON() throws FileNotFoundException {
        exportJSON(System.getProperty("user.dir"));
    }
	
	/**
	 * Export this Abstract Syntax Tree (AST) to JSON format.
	 * The JSON file will be saved inside the given directory path.
	 */
	public void exportJSON(String outDir) throws FileNotFoundException {
       // throw new UnsupportedOperationException("AST export to JSON not implemented yet!");
	   if (!outDir.endsWith(File.separator))
            outDir += File.separator;
		File outDirFile = new File(outDir);
        outDirFile.mkdirs();
        String filename = new File(FILE_PATH).getName();
        filename = filename.substring(0, filename.lastIndexOf('.'));
        String filepath = outDir + filename + "-AST.json";
		try (PrintWriter json = new PrintWriter(filepath, "UTF-8")) {
			json.println("{\n  \"type\": \"AST\",");
			json.println("  \"file\": \"" + FILE_PATH + "\",");
			json.println("\n\n  \"nodes\": [");
			Map<ASNode, String> nodeIDs = new LinkedHashMap<>();
			int nodeCounter = 1;
			Enumeration<ASNode> asnode = enumerateAllVertices();
			while (asnode.hasMoreElements()) {
				ASNode node = asnode.nextElement();
				json.println("    {");
				String id = "v" + nodeCounter++;
				nodeIDs.put(node, id);
				json.println("      \"id\": \"" + id + "\",");
				json.println("      \"label\": \"" + node.getType().label + "\",");
				String code = node.getCode();
				if(code!= null){
					code = code.replaceAll("[\\n\\t]", "");
					json.println("      \"code\": \"" + code.replace("\"", "\\\"")+ "\"");
				}else{
					json.println("      \"code\": \"" + code+ "\"");
				}
				if(asnode.hasMoreElements())
					json.println("    },");
				else
					json.println("    }");
			}
			json.println("  ],\n\n\n  \"edges\": [");
			int edgeCounter = 1;
			Enumeration<Edge<ASNode,ASEdge>> asedge = enumerateAllEdges();
			while (asedge.hasMoreElements()) {
				Edge<ASNode, ASEdge> edge = asedge.nextElement();
				json.println("    {");
				String id = "e" + edgeCounter++;
				json.println("      \"id\": \"" + id + "\",");
				String src = nodeIDs.get(edge.source);
				json.println("      \"source\": \"" + src + "\",");
				String trgt = nodeIDs.get(edge.target);
				json.println("      \"target\": \"" + trgt + "\"");
				if(asedge.hasMoreElements())
					json.println("    },");
				else
					json.println("    }");
			}
			json.println("  ]\n}");
		} catch (UnsupportedEncodingException ex) {
			Logger.error(ex);
		}
		Logger.info("DDS of PDG exported to: " + filepath);
    }
    
    /**
     * Export this Abstract Syntax Tree (AST) to DOT format. 
     * The DOT file will be saved in current working directory. 
     * The DOT format is mainly aimed for visualization purposes.
     */
    public void exportDOT() throws FileNotFoundException {
        exportDOT(System.getProperty("user.dir"));
    }
    
    /**
     * Export this Abstract Syntax Tree (AST) to DOT format. 
     * The DOT file will be saved inside the given directory. 
     * The DOT format is mainly aimed for visualization purposes.
     */
    public void exportDOT(String outDir) throws FileNotFoundException {
        if (!outDir.endsWith(File.separator))
            outDir += File.separator;
        File outDirFile = new File(outDir);
        outDirFile.mkdirs();
        String filename = new File(FILE_PATH).getName();
        filename = filename.substring(0, filename.lastIndexOf('.'));
        String filepath = outDir + filename + "-AST.dot";
        try (PrintWriter dot = new PrintWriter(filepath, "UTF-8")) {
            dot.println("digraph " + filename + "_AST {");
            dot.println("  // graph-vertices");
            Map<ASNode, String> nodeNames = new LinkedHashMap<>();
            int nodeCounter = 1;
            
            for (ASNode node : allVertices) {
                String name = "n" + nodeCounter++;
                nodeNames.put(node, name);
                StringBuilder label = new StringBuilder("  [label=\"");
                label.append(StringUtils.escape(node.toString())).append("\"];");
                dot.println("  " + name + label.toString());
            }
			dot.println("  // graph-edges");
            for (Edge<ASNode, ASEdge> edge : allEdges) {
                String src = nodeNames.get(edge.source);
                String trg = nodeNames.get(edge.target);
                dot.println("  " + src + " -> " + trg + ";");
            }
			dot.println("  // end-of-graph\n}");
        } catch (UnsupportedEncodingException ex) {
			Logger.error(ex);
        }
		Logger.info("AST exported to: " + filepath);
    }
	
}
